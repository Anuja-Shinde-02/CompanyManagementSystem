/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Signup;


import Business.DB4OUtil.DB4OUtil;
import Business.Donor.Donor;
import Business.Donor.DonorDirectory;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Requestor.Requestor;
import Business.Requestor.RequestorDirectory;

import Business.Role.DonorRole;
import Business.Role.RequestorRole;

import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import Business.Utils.OTP;
import Business.Utils.SendMail;
import Business.Utils.ValidationUtils;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.HomeJPanel;

/**
 *
 * @author anujakale
 */
public class SignupWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SignupWorkAreaJPanel
     */
    EcoSystem ecosystem;
    JPanel userProcessContainer;
    UserAccount ua;
    RequestorDirectory rd;
    Requestor req;
    Donor don;
    DonorDirectory dd;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    public boolean isNotValid = false;
    private static final String secretKey = "9F2H65BYTJ";
   

    public SignupWorkAreaJPanel(JPanel userProcessContainer, EcoSystem ecosystem) throws IOException {
        
        this.ecosystem = ecosystem;
        this.userProcessContainer = userProcessContainer;

        if (ecosystem.getReqDir()== null) {
            ecosystem.setReqDir(new RequestorDirectory());
        }
        if (ecosystem.getDonDir()== null) {
            ecosystem.setDonDir(new DonorDirectory());
        }
       
        
        initComponents();
        
        bgImgLbl.setMinimumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
        bgImgLbl.setPreferredSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
        bgImgLbl.setMaximumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));

        Image img = ImageIO.read(getClass().getResource("/Images/unnamed.png"));
        Image newimg = img.getScaledInstance(39, 41, java.awt.Image.SCALE_SMOOTH);

        btnHome.setIcon(new ImageIcon(newimg));
        
        
        Image img1 = ImageIO.read(getClass().getResource("/Images/blurbg.jpeg"));
        Image newimg1 = img1.getScaledInstance(userProcessContainer.getWidth(), userProcessContainer.getHeight(), java.awt.Image.SCALE_SMOOTH);

        bgImgLbl.setIcon(new ImageIcon(newimg1));

        rdInd.setSelected(true);
        rdPanel.setVisible(true);
        
        
        System.out.println("container width :" +userProcessContainer.getWidth());
        System.out.println("width : " + bgImgLbl.getWidth());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnHome = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblZipCode = new javax.swing.JLabel();
        txtZipcode = new javax.swing.JTextField();
        lblPhoneNo = new javax.swing.JLabel();
        txtPhoneNo = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblConfPassword = new javax.swing.JLabel();
        txtConfPassword = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmailID = new javax.swing.JTextField();
        lblIdentity = new javax.swing.JLabel();
        cmbLoginType = new javax.swing.JComboBox<>();
        cmbGender = new javax.swing.JComboBox<>();
        lblState = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        rdPanel = new javax.swing.JPanel();
        bgImgLbl = new javax.swing.JLabel();
        rdRes = new javax.swing.JRadioButton();
        rdOr = new javax.swing.JRadioButton();
        rdInd = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1100, 1000));

        btnHome.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblName.setText("Name :");

        txtName.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNameFocusLost(evt);
            }
        });

        lblAge.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblAge.setText("Age :");

        txtAge.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgeFocusLost(evt);
            }
        });

        lblGender.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblGender.setText("Gender :");

        lblAddress.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblAddress.setText("Address :");

        txtAddress.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddressFocusLost(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblCity.setText("City :");

        txtCity.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCityFocusLost(evt);
            }
        });
        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        lblZipCode.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblZipCode.setText("Zip Code :");

        txtZipcode.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtZipcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZipcodeFocusLost(evt);
            }
        });

        lblPhoneNo.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblPhoneNo.setText("Phone No:");

        txtPhoneNo.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtPhoneNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhoneNoFocusLost(evt);
            }
        });

        lblUserName.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblUserName.setText("User Name :");

        txtUsername.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsernameFocusLost(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblPassword.setText("Password :");

        txtPassword.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });

        lblConfPassword.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblConfPassword.setText("Confirm Password :");

        txtConfPassword.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtConfPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtConfPasswordFocusLost(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblEmail.setText(" Email : ");

        txtEmailID.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtEmailID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailIDFocusLost(evt);
            }
        });

        lblIdentity.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblIdentity.setText("I am a :");

        cmbLoginType.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbLoginType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food Donor", "Food Requestor" }));
        cmbLoginType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLoginTypeActionPerformed(evt);
            }
        });

        cmbGender.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male", "Others" }));

        lblState.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblState.setText("State :");

        txtState.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        txtState.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStateFocusLost(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(102, 255, 102));
        btnSave.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        btnSave.setText("Create");
        btnSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(255, 51, 51));
        btnClear.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        rdPanel.setOpaque(false);

        javax.swing.GroupLayout rdPanelLayout = new javax.swing.GroupLayout(rdPanel);
        rdPanel.setLayout(rdPanelLayout);
        rdPanelLayout.setHorizontalGroup(
            rdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        rdPanelLayout.setVerticalGroup(
            rdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        bgImgLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/blurbg.jpeg"))); // NOI18N
        bgImgLbl.setMaximumSize(new java.awt.Dimension(1100, 1000));
        bgImgLbl.setPreferredSize(new java.awt.Dimension(1100, 1000));

        rdRes.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rdRes.setText("Restaurant");
        rdRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdResActionPerformed(evt);
            }
        });

        rdOr.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rdOr.setText("Organisation");
        rdOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdOrActionPerformed(evt);
            }
        });

        rdInd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rdInd.setText("Individual");
        rdInd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdIndActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Verify Email");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1346, 1346, 1346))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(lblIdentity)
                        .addGap(38, 38, 38)
                        .addComponent(cmbLoginType, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(rdRes)
                                .addGap(18, 18, 18)
                                .addComponent(rdOr)
                                .addGap(18, 18, 18)
                                .addComponent(rdInd))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addGap(11, 11, 11)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(lblCity)
                                                        .addComponent(lblAddress)
                                                        .addComponent(lblState)
                                                        .addComponent(lblGender)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblZipCode)
                                                    .addComponent(lblPhoneNo)
                                                    .addComponent(lblUserName)
                                                    .addComponent(lblPassword)))
                                            .addComponent(lblConfPassword)
                                            .addComponent(lblEmail))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblName)
                                            .addComponent(lblAge))
                                        .addGap(62, 62, 62)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtConfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(bgImgLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bgImgLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblIdentity)
                                    .addComponent(cmbLoginType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdRes)
                                    .addComponent(rdOr)
                                    .addComponent(rdInd))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(225, 225, 225)
                                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(135, 135, 135)
                                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblName))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(45, 45, 45)
                                                        .addComponent(lblAge)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(lblGender)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(38, 38, 38)
                                                                .addComponent(lblAddress))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(83, 83, 83)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(lblCity))))
                                                        .addGap(18, 18, 18)
                                                        .addComponent(lblState)
                                                        .addGap(31, 31, 31)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(txtZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(lblZipCode))))
                                                .addGap(28, 28, 28)
                                                .addComponent(lblPhoneNo))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(314, 314, 314)
                                                .addComponent(txtPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblUserName)
                                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPassword))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(498, 498, 498)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtConfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblConfPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(294, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        try {
            // TODO add your handling code here:
            HomeJPanel sp = new HomeJPanel(userProcessContainer);
            userProcessContainer.add("Home", sp);
            CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
            crdLyt.show(userProcessContainer, "Home");
        } catch (IOException ex) {
            Logger.getLogger(SignupWorkAreaJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnHomeActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        isNotValid = false;
        isNotValid = mandatoryValidations();
        if (isNotValid) {
            return;
        }

        //When examining a method's input and output parameters, validation might be applied. 
        if (nameValidation()) {
            return;
        }
        if (ageValidation()) {
            return;
        }
        if (addressValidation()) {
            return;
        }
        if (cityValidation()) {
            return;
        }
        if (stateValidation()) {
            return;
        }
        if (zipValidation()) {
            return;
        }
        if (phnValidation()) {
            return;
        }
        if (userNameValidation()) {
            return;
        }
        if (pwdValidation()) {
            return;
        }
        if (cnfPwdValidation()) {
            return;
        }
        if (emailValidation()) {
            return;
        }

        UserAccountDirectory usersList = ecosystem.getUserAccountDirectory();
        String role = (String) cmbLoginType.getSelectedItem();
        Employee employee = new Employee();
        employee.setName(txtName.getText());
        boolean userDoNotExists = true;
        ArrayList<UserAccount> users = usersList.getUserAccountList();
        for (UserAccount ua : users) {
            if (ua.getUsername().equals(txtUsername.getText())) {
                userDoNotExists = false;
            }
        }

        if (userDoNotExists) {
            if (txtPassword.getText().equals(txtConfPassword.getText())) {
                switch (role) {
                    case "Food Requestor":
                        usersList.createUserAccount(txtUsername.getText(), txtPassword.getText(), employee, new RequestorRole());
                        ua = usersList.getUserAccount(txtUsername.getText());
                        req = new Requestor(ua);
                        
                         //The get method returns the variable name's value.
                        //The name variable is given a parameter (newName), which is assigned via the set method.
                        req.setReqType(getReqType());
                        req.setReqName(txtName.getText());
                        req.setReqAddres(txtAddress.getText());
                        req.setReqCity(txtCity.getText());
                        req.setReqState(txtState.getText());
                        req.setReqEmail(txtEmailID.getText());
                        req.setReqPhno(txtPhoneNo.getText());
                        req.setReqZipcode(txtZipcode.getText());
                        req.setReqUserName(txtUsername.getText());
                        req.setReqPwd(txtPassword.getText());

                        rd = ecosystem.getReqDir();
                        rd.addReqDir(req);
                        ecosystem.setReqDir(rd);
                        break;

                    case "Food Donor":
                        usersList.createUserAccount(txtUsername.getText(), txtPassword.getText(), employee, new DonorRole());
                        ua = usersList.getUserAccount(txtUsername.getText());
                        don = new Donor(ua);
                        
                        //The get method returns the variable name's value.
                        //The name variable is given a parameter (newName), which is assigned via the set method.
                       
                        don.setDonorType(role);

                        don.setDonorName(txtName.getText());
                        don.setDonorAddres(txtAddress.getText());
                        don.setDonorCity(txtCity.getText());
                        don.setDonorState(txtState.getText());
                        don.setDonorEmail(txtEmailID.getText());
                        don.setDonorPhno(txtPhoneNo.getText());
                        don.setDonorZipcode(txtZipcode.getText());
                        don.setDonPwd(txtUsername.getText());
                        don.setDonPwd(txtPassword.getText());

                        dd = ecosystem.getDonDir();
                        dd.addDonDir(don);
                        ecosystem.setDonDir(dd);
                        break;
                    default:
                        break;

                }
                //meassage will pop up that user is craeted after doing the required procedure 
                JOptionPane.showMessageDialog(this, "User created");

                clearFields();
            } else {
                //make sure that your password and confirm password match
                JOptionPane.showMessageDialog(this, "Password and confirm password does not match");
            }
        } else {
               //you cannot choose the existing username
            JOptionPane.showMessageDialog(this, "UserName already exist");
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void rdResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdResActionPerformed
        // TODO add your handling code here:
        if (rdRes.isSelected()) {
            rdOr.setSelected(false);
            rdInd.setSelected(false);

            txtAge.setEditable(false);
            txtAge.setEnabled(false);
            cmbGender.setEditable(false);
            cmbGender.setEnabled(false);
        } else if (rdRes.isSelected() == false && rdOr.isSelected() == false && rdInd.isSelected() == false) {
            
            //it is required to provide donor type from the given
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }


    }//GEN-LAST:event_rdResActionPerformed

    private void rdOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdOrActionPerformed
        // TODO add your handling code here:
        if (rdOr.isSelected()) {
            rdRes.setSelected(false);
            rdInd.setSelected(false);

            txtAge.setEditable(false);
            txtAge.setEnabled(false);
            cmbGender.setEditable(false);
            cmbGender.setEnabled(false);
        } else if (rdRes.isSelected() == false && rdOr.isSelected() == false && rdInd.isSelected() == false) {
            //it is required to provide donor type from the given
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }
    }//GEN-LAST:event_rdOrActionPerformed

    private void rdIndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdIndActionPerformed
        // TODO add your handling code here:
        if (rdInd.isSelected()) {
            rdOr.setSelected(false);
            rdRes.setSelected(false);

            txtAge.setEditable(true);
            txtAge.setEnabled(true);
            cmbGender.setEditable(true);
            cmbGender.setEnabled(true);
        } else if (rdRes.isSelected() == false && rdOr.isSelected() == false && rdInd.isSelected() == false) {
            //it is required to provide donor type from the given
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }
    }//GEN-LAST:event_rdIndActionPerformed

    private void cmbLoginTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLoginTypeActionPerformed
        // TODO add your handling code here:

        if (cmbLoginType.getSelectedIndex() == 0) {
            // rdPanel.setVisible(true);
            rdRes.setVisible(true);
            rdOr.setText("Organization");

        } else {
            // rdPanel.setVisible(false);
            rdRes.setVisible(false);
            rdOr.setText("Orphanage/Old Age Home");

        }

    }//GEN-LAST:event_cmbLoginTypeActionPerformed

    private void txtNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNameFocusLost
        // TODO add your handling code here:
        nameValidation();
    }//GEN-LAST:event_txtNameFocusLost

    private void txtAgeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgeFocusLost
        // TODO add your handling code here:
        ageValidation();
    }//GEN-LAST:event_txtAgeFocusLost

    private void txtAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressFocusLost
        // TODO add your handling code here:
        addressValidation();
    }//GEN-LAST:event_txtAddressFocusLost

    private void txtCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusLost
        // TODO add your handling code here:
        cityValidation();
    }//GEN-LAST:event_txtCityFocusLost

    private void txtStateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStateFocusLost
        // TODO add your handling code here:
        stateValidation();
    }//GEN-LAST:event_txtStateFocusLost

    private void txtZipcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZipcodeFocusLost
        // TODO add your handling code here:
        zipValidation();
    }//GEN-LAST:event_txtZipcodeFocusLost

    private void txtPhoneNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneNoFocusLost
        // TODO add your handling code here:
        phnValidation();
    }//GEN-LAST:event_txtPhoneNoFocusLost

    private void txtUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusLost
        // TODO add your handling code here:
        userNameValidation();
    }//GEN-LAST:event_txtUsernameFocusLost

    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusLost
        // TODO add your handling code here:
        pwdValidation();
    }//GEN-LAST:event_txtPasswordFocusLost

    private void txtConfPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConfPasswordFocusLost
        // TODO add your handling code here:
        cnfPwdValidation();
    }//GEN-LAST:event_txtConfPasswordFocusLost

    private void txtEmailIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailIDFocusLost
        // TODO add your handling code here:
        emailValidation();
    }//GEN-LAST:event_txtEmailIDFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(txtEmailID.getText().isEmpty() || !ValidationUtils.validateEmail(txtEmailID.getText())) {

            JOptionPane.showMessageDialog(this, "Email not correct");
            return;
        }
        OTP otp = new OTP();
        String otpGenerated =  otp.getOTP(4);
        SendMail.sendMail(otpGenerated, txtEmailID.getText());
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("OtpJPanel", new OtpJPanel(userProcessContainer, otpGenerated));
        layout.next(userProcessContainer);
        //new OtpJPanel().setVisible(true);
        
    }
        
        public void validateOtp(boolean f) {
        if(f) {
        jButton1.setEnabled(true);
        } else {
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgImgLbl;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbLoginType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblConfPassword;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblIdentity;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhoneNo;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JRadioButton rdInd;
    private javax.swing.JRadioButton rdOr;
    private javax.swing.JPanel rdPanel;
    private javax.swing.JRadioButton rdRes;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtConfPassword;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPhoneNo;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtZipcode;
    // End of variables declaration//GEN-END:variables

    private boolean mandatoryValidations() {
        if (txtName.getText().isEmpty() || txtName.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Name!!");
            return true;
        }

        if (txtAge.isEnabled()) {
            if (txtAge.getText().isEmpty() || txtAge.getText() == "") {
                JOptionPane.showMessageDialog(this, "Please Provide Age!!");
                return true;
            }
        }

        if (txtAddress.getText().isEmpty() || txtAddress.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Address!!");
            return true;
        }

        if (txtCity.getText().isEmpty() || txtCity.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide City!!");
            return true;
        }

        if (txtState.getText().isEmpty() || txtState.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide State!!");
            return true;
        }

        if (txtZipcode.getText().isEmpty() || txtZipcode.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide ZipCode!!");
            return true;
        }

        if (txtPhoneNo.getText().isEmpty() || txtPhoneNo.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Phone No!!");
            return true;
        }
        if (txtUsername.getText().isEmpty() || txtUsername.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide User Name!!");
            return true;
        }
        if (txtPassword.getText().isEmpty() || txtPassword.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Password!!");
            return true;
        }
        if (txtConfPassword.getText().isEmpty() || txtConfPassword.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please  Confirm Password!!");
            return true;
        }
        if (txtEmailID.getText().isEmpty() || txtEmailID.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Email!!");
            return true;
        }

        if (!rdRes.isSelected() && !rdOr.isSelected() && !rdInd.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please Provide Resident Address!!");
            return true;
        }

        return isNotValid;
    }

    private boolean nameValidation() {
        isNotValid = false;
        if ((!txtName.getText().isEmpty()) && !txtName.getText().matches("^\\p{L}+[\\p{L}\\p{Z}\\p{P}]{0,}")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Name !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean ageValidation() {
        isNotValid = false;
        if (txtAge.isEnabled()) {
            if ((!txtAge.getText().isEmpty()) && !txtAge.getText().matches("^[0-9]*$") ) {
//                && Integer.parseInt(txtAge.getText().toString()) < 0 && Integer.parseInt(txtAge.getText().toString()) > 100
                JOptionPane.showMessageDialog(this, "Please Provide Only Numbers !!");
                isNotValid = true;
                return isNotValid;
            }
            if((!txtAge.getText().isEmpty()) && (Integer.parseInt(txtAge.getText().toString()) < 0 || Integer.parseInt(txtAge.getText().toString()) > 100)){
               JOptionPane.showMessageDialog(this, "Please Provide Valid Age !!");
                isNotValid = true;
                return isNotValid;
            }
        }
        return isNotValid;
    }

    private boolean addressValidation() {
        isNotValid = false;
        if ((!txtAddress.getText().isEmpty()) && !txtAddress.getText().matches("^[#.0-9a-zA-Z ]+$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Address !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean cityValidation() {
        isNotValid = false;
        if ((!txtCity.getText().isEmpty()) && !txtCity.getText().matches("^[a-zA-Z_]*$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid City !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean userNameValidation() {
        isNotValid = false;
        if ((!txtUsername.getText().isEmpty()) && !txtUsername.getText().matches("^[a-zA-Z0-9_]*$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid User Name !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean pwdValidation() {
        isNotValid = false;
        if ((!txtPassword.getText().isEmpty()) && !txtPassword.getText().matches("^[a-zA-Z0-9]*$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Password !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean cnfPwdValidation() {
        isNotValid = false;
        if ((!txtConfPassword.getText().isEmpty()) && !txtConfPassword.getText().matches("^[a-zA-Z0-9]*$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Password !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean phnValidation() {
        isNotValid = false;
        if ((!txtPhoneNo.getText().isEmpty()) && !txtPhoneNo.getText().matches("^(\\+\\d{1,3}( )?)?((\\(\\d{3}\\))|\\d{3})[- .]?\\d{3}[- .]?\\d{4}$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Phone Number !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean emailValidation() {
        isNotValid = false;
        if ((!txtEmailID.getText().isEmpty()) && !txtEmailID.getText().matches("^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Email Address !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean zipValidation() {
        isNotValid = false;
        if ((!txtZipcode.getText().isEmpty()) && !txtZipcode.getText().matches("^[0-9]{5}(?:-[0-9]{4})?$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Zip Code !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean stateValidation() {
        isNotValid = false;
        if ((!txtState.getText().isEmpty()) && !txtState.getText().matches("([a-zA-Z]+|[a-zA-Z]+\\\\s[a-zA-Z]+)")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid State !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private String getReqType() {
        String reqType = "";
        if (rdOr.isSelected()) {
            reqType = "Organization";
        } else if (rdInd.isSelected()) {
            reqType = "Individual";
        } else if (rdRes.isSelected()) {
            reqType = "Restaurant";
        }
        return reqType;
    }

    private void clearFields() {
        
                txtName.setText("");
                txtAddress.setText("");
                txtCity.setText("");
                txtAge.setText("");
                cmbGender.setSelectedIndex(0);
                txtState.setText("");
                txtEmailID.setText("");
                txtPhoneNo.setText("");
                txtZipcode.setText("");
                txtPassword.setText("");
                txtUsername.setText("");
                txtConfPassword.setText("");
                cmbLoginType.setSelectedIndex(0);
                rdInd.setSelected(true);
                rdOr.setSelected(false);
                rdRes.setSelected(false);
                
    }

}
