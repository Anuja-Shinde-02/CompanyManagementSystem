/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.FCPantry.FCPantry;
import Business.FCPantry.FCPantryDirectory;
import Business.FCWarehouse.FCWarehouse;
import Business.Role.FCPManagerRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.Dimension;
import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.DonorRole.DonorProfilePanel;

/**
 *
 * @author anujakale
 */
public class AddFCPantryPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddFCPantryPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    FCPantryDirectory fcpd;
    UserAccountDirectory uad;
    public AddFCPantryPanel(JPanel userProcessContainer,EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        if(ecosystem.getFCPDirectory() == null){
         ecosystem.setFCPDirectory( new FCPantryDirectory());
        }
        ArrayList<String> whList = new ArrayList<String>();
        for (FCWarehouse fcw : ecosystem.getFCWDirectory().getFcwList()){
                whList.add(fcw.getFcwName());
        }         
        comboWHPantry.setModel(new DefaultComboBoxModel<String>(whList.toArray(new String[0])));
        setBG();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddPantryTitle = new javax.swing.JLabel();
        lblFoodPantryName = new javax.swing.JLabel();
        txtFCPname = new javax.swing.JTextField();
        lblFoodPantryPhno = new javax.swing.JLabel();
        txtFCPPhno = new javax.swing.JTextField();
        lblFoodPantryAdd = new javax.swing.JLabel();
        txtFPAdd = new javax.swing.JTextField();
        lblFoodPantryCity = new javax.swing.JLabel();
        txtFPCity = new javax.swing.JTextField();
        lblFoodPantryState = new javax.swing.JLabel();
        txtFPState = new javax.swing.JTextField();
        lblFoodPantryZip = new javax.swing.JLabel();
        txtFPZip = new javax.swing.JTextField();
        lblFoodPantryManager = new javax.swing.JLabel();
        txtFPManager = new javax.swing.JTextField();
        lblFPManagerUsername = new javax.swing.JLabel();
        txtFPManagerUsername = new javax.swing.JTextField();
        lblFoodPantrypwd = new javax.swing.JLabel();
        txtFPpwd = new javax.swing.JTextField();
        lblFPConfpwd = new javax.swing.JLabel();
        txtFPConfpwd = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        lblWHPantryName = new javax.swing.JLabel();
        lblFoodPantryID = new javax.swing.JLabel();
        txtFCPid = new javax.swing.JTextField();
        lblWHfcpname1 = new javax.swing.JLabel();
        lblFPidError = new javax.swing.JLabel();
        lblFPnameError = new javax.swing.JLabel();
        lblFPPhnoError = new javax.swing.JLabel();
        lblFPAddError = new javax.swing.JLabel();
        lblFPCityError = new javax.swing.JLabel();
        lblFPStateError = new javax.swing.JLabel();
        lblFPZipError = new javax.swing.JLabel();
        lblFPantryManagerError = new javax.swing.JLabel();
        lblFPManagerUsernameError = new javax.swing.JLabel();
        lblFPPwdError = new javax.swing.JLabel();
        lblFPConfPwdError = new javax.swing.JLabel();
        comboWHPantry = new javax.swing.JComboBox<>();
        LabelImg = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAddPantryTitle.setFont(new java.awt.Font("Lucida Handwriting", 1, 24)); // NOI18N
        lblAddPantryTitle.setForeground(new java.awt.Color(255, 93, 119));
        lblAddPantryTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddPantryTitle.setText("! Add Pantry !");
        add(lblAddPantryTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));

        lblFoodPantryName.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryName.setText("Pantry Name :");
        add(lblFoodPantryName, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, -1, -1));

        txtFCPname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFCPname.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFCPname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFCPnameFocusLost(evt);
            }
        });
        add(txtFCPname, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 136, 137, -1));

        lblFoodPantryPhno.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryPhno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryPhno.setText("Phone Number :");
        add(lblFoodPantryPhno, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        txtFCPPhno.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFCPPhno.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFCPPhno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFCPPhnoFocusLost(evt);
            }
        });
        add(txtFCPPhno, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 179, 137, -1));

        lblFoodPantryAdd.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryAdd.setText("Address :");
        add(lblFoodPantryAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(297, 226, -1, -1));

        txtFPAdd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPAdd.setPreferredSize(new java.awt.Dimension(150, 25));
        add(txtFPAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 222, 137, -1));

        lblFoodPantryCity.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryCity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryCity.setText("City :");
        add(lblFoodPantryCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(318, 269, -1, -1));

        txtFPCity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPCity.setPreferredSize(new java.awt.Dimension(150, 25));
        add(txtFPCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 265, 137, -1));

        lblFoodPantryState.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryState.setText("State :");
        add(lblFoodPantryState, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 312, -1, -1));

        txtFPState.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPState.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFPState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFPStateActionPerformed(evt);
            }
        });
        add(txtFPState, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 308, 137, -1));

        lblFoodPantryZip.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryZip.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryZip.setText("Zipcode :");
        add(lblFoodPantryZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 355, -1, -1));

        txtFPZip.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPZip.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFPZip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFPZipFocusLost(evt);
            }
        });
        txtFPZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFPZipActionPerformed(evt);
            }
        });
        add(txtFPZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 351, 137, -1));

        lblFoodPantryManager.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryManager.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryManager.setText("FC Pantry Manager :");
        add(lblFoodPantryManager, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 400, -1, -1));

        txtFPManager.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPManager.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFPManager.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFPManagerFocusLost(evt);
            }
        });
        add(txtFPManager, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 394, 137, -1));

        lblFPManagerUsername.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFPManagerUsername.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFPManagerUsername.setText("FCP Manager Username :");
        add(lblFPManagerUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, -1, -1));

        txtFPManagerUsername.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPManagerUsername.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFPManagerUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFPManagerUsernameFocusLost(evt);
            }
        });
        add(txtFPManagerUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 437, 137, -1));

        lblFoodPantrypwd.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantrypwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantrypwd.setText("Password :");
        add(lblFoodPantrypwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 484, -1, -1));

        txtFPpwd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPpwd.setPreferredSize(new java.awt.Dimension(150, 25));
        add(txtFPpwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 480, 137, -1));

        lblFPConfpwd.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFPConfpwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFPConfpwd.setText("Confirm Password :");
        add(lblFPConfpwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 530, -1, -1));

        txtFPConfpwd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFPConfpwd.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFPConfpwd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFPConfpwdFocusLost(evt);
            }
        });
        add(txtFPConfpwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 523, 137, -1));

        btnSubmit.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 590, 80, 40));

        lblWHPantryName.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblWHPantryName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWHPantryName.setText("Warehouse Name :");
        add(lblWHPantryName, new org.netbeans.lib.awtextra.AbsoluteConstraints(243, 57, -1, -1));

        lblFoodPantryID.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblFoodPantryID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoodPantryID.setText("Pantry Id :");
        add(lblFoodPantryID, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 98, -1, -1));

        txtFCPid.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFCPid.setPreferredSize(new java.awt.Dimension(150, 25));
        txtFCPid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFCPidFocusLost(evt);
            }
        });
        add(txtFCPid, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 94, 137, -1));

        lblWHfcpname1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblWHfcpname1, new org.netbeans.lib.awtextra.AbsoluteConstraints(548, 53, 180, 30));

        lblFPidError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPidError, new org.netbeans.lib.awtextra.AbsoluteConstraints(548, 94, 180, 30));

        lblFPnameError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPnameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 136, 180, 30));

        lblFPPhnoError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPPhnoError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 179, 180, 30));

        lblFPAddError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPAddError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 222, 180, 30));

        lblFPCityError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPCityError, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 265, 180, 30));

        lblFPStateError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPStateError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 308, 180, 30));

        lblFPZipError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPZipError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 351, 180, 30));

        lblFPantryManagerError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPantryManagerError, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 394, 180, 30));

        lblFPManagerUsernameError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPManagerUsernameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 437, 180, 30));

        lblFPPwdError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPPwdError, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 480, 180, 30));

        lblFPConfPwdError.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(lblFPConfPwdError, new org.netbeans.lib.awtextra.AbsoluteConstraints(542, 523, 180, 30));

        comboWHPantry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(comboWHPantry, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 140, -1));
        add(LabelImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 700));
    }// </editor-fold>//GEN-END:initComponents

     public void setBG() {
        try {
            LabelImg.setMinimumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
            LabelImg.setPreferredSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
            LabelImg.setMaximumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));

            Image img = ImageIO.read(getClass().getResource("/Images/blurbg.jpeg"));

            Image newimg = img.getScaledInstance(1500, userProcessContainer.getHeight(), java.awt.Image.SCALE_SMOOTH);
            LabelImg.setIcon(new ImageIcon(newimg));
        } catch (IOException ex) {
            Logger.getLogger(DonorProfilePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    private void txtFCPnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFCPnameFocusLost
        // TODO add your handling code here:
        if(!(txtFCPname.getText().matches("^[a-zA-Z]*$"))){
            
             //in the add FC Pantry you will have to add the Pantry Name in alphabets only.
            lblFPnameError.setText("Input invalid. Please enter only alphabets");
        }
        else{
            lblFPnameError.setText("");
        }
    }//GEN-LAST:event_txtFCPnameFocusLost

    private void txtFCPPhnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFCPPhnoFocusLost
        // TODO add your handling code here:
        if(!(txtFCPPhno.getText().matches("^[0-9]*$")) || !(txtFCPPhno.getText().length()==10)) {
            
            //in the add FC Pantry you will have to add the Phone Number in numbers only.
            lblFPPhnoError.setText("Please enter a valid phone number");
        }
        else{
            lblFPPhnoError.setText("");

        }
    }//GEN-LAST:event_txtFCPPhnoFocusLost

    private void txtFPZipFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFPZipFocusLost
        // TODO add your handling code here:
        if((txtFPZip.getText().matches("^[a-zA-Z]*$"))){
            
             //in the add FC Pantry you will have to add the Zip Code in numbers only.
            lblFPZipError.setText("Input invalid. Please enter only numbers");
        }
        else{
            lblFPZipError.setText("");
        }
    }//GEN-LAST:event_txtFPZipFocusLost

    private void txtFPManagerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFPManagerFocusLost
        // TODO add your handling code here:
        if(!(txtFPManager.getText().matches("^[a-zA-Z]*$"))){
            
            //in the add FC Pantry you will have to add the FCP Manager in alphabets only. 
            lblFPantryManagerError.setText("Input invalid. Please enter only alphabets");
        }
        else{
            lblFPantryManagerError.setText("");
        }
    }//GEN-LAST:event_txtFPManagerFocusLost

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if(!nullCheck()){
             if(chkpwd()){
            UserAccountDirectory uaList = ecosystem.getUserAccountDirectory();
            Employee employee = new Employee();
            
           //The get method returns the variable name's value.
          //The name variable is given a parameter (newName), which is assigned via the set method.
       
            employee.setName(txtFPManager.getText());
            String role = "FCPManager";
            FCPantry fcp=new FCPantry();
            fcp.setFcpId("fcp"+txtFCPid.getText());
            fcp.setFcpWHname(comboWHPantry.getSelectedItem().toString());
            fcp.setFcpName(txtFCPname.getText());
            fcp.setFcpPhno(txtFCPPhno.getText());
            fcp.setFcpAddres(txtFPAdd.getText());
            fcp.setFcpCity(txtFPCity.getText());
            fcp.setFcpState(txtFPState.getText());
            fcp.setFcpZipcode(txtFPZip.getText());
            fcp.setFcpManager(txtFPManager.getText());
            UserAccount fcpAccount=new UserAccount();
            fcpAccount.setUsername(txtFPManagerUsername.getText());
            fcpAccount.setPassword(txtFPpwd.getText());
            fcpAccount.setRole(new FCPManagerRole());
            fcpAccount.setEmployee(employee);
            uad=ecosystem.getUserAccountDirectory();
            uad.createUserAccount(txtFPManagerUsername.getText(), txtFPpwd.getText(), employee, new FCPManagerRole());
            ecosystem.setUserAccountDirectory(uad);
            fcp.setFcpAccount(fcpAccount);
            fcpd = ecosystem.getFCPDirectory();
            fcpd.addNewFCPantry(fcp);
            ecosystem.setFCPDirectory(fcpd);
            
            //after adding all the fileds properly you will be successfully added 
            JOptionPane.showMessageDialog(this, "Food Cloud Pantry added successfully!");
            clearfields();
            //  fcpAccount.setRole(new FCAdminRole());
            //fcp.setFcpAccount(fcpAccount);
           // ecosystem.getFCPDirectory().addNewFCPantry(fcp);
             }
             else{
                 
              //JOptionPane.showMessageDialog is used to create an information-message dialog titled "Message"
                
             //message will pop up if given password does not match
              JOptionPane.showMessageDialog(this, "Password Mismatch. Please verify the password entered.");  
              txtFPConfpwd.setText("");
            }
            
        }
        else{
            //it is madetory to fill all the fields or else error message will pop up
            JOptionPane.showMessageDialog(this, "Please make sure that you have filled all mandatory fields");
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void txtFPStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFPStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFPStateActionPerformed

    private void txtFPZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFPZipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFPZipActionPerformed

    private void txtFCPidFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFCPidFocusLost
        // TODO add your handling code here:
        if((txtFCPid.getText().matches("^[a-zA-Z]*$"))){
            lblFPidError.setText("Invalid input. Please enter only numbers");
        }
        else{
            lblFPidError.setText("");
        }
    }//GEN-LAST:event_txtFCPidFocusLost

    private void txtFPManagerUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFPManagerUsernameFocusLost
        // TODO add your handling code here:
        if(!(txtFPManagerUsername.getText().matches("^[a-zA-Z]*$"))){
            lblFPManagerUsernameError.setText("Input invalid. Please enter only alphabets");
        }
        else{
            lblFPManagerUsernameError.setText("");
        }
    }//GEN-LAST:event_txtFPManagerUsernameFocusLost

    
    private void txtFPConfpwdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFPConfpwdFocusLost
        // TODO add your handling code here:
//        if(!(txtFCPpwd.getText().equals(txtFCPpwd1.getText()))){
//            lblFCApwd2.setText("Password Mismatch. Please verify the password entered.");
//        }
//        else{
//            lblFCApwd2.setText("");
//        }
    }//GEN-LAST:event_txtFPConfpwdFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelImg;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> comboWHPantry;
    private javax.swing.JLabel lblAddPantryTitle;
    private javax.swing.JLabel lblFPAddError;
    private javax.swing.JLabel lblFPCityError;
    private javax.swing.JLabel lblFPConfPwdError;
    private javax.swing.JLabel lblFPConfpwd;
    private javax.swing.JLabel lblFPManagerUsername;
    private javax.swing.JLabel lblFPManagerUsernameError;
    private javax.swing.JLabel lblFPPhnoError;
    private javax.swing.JLabel lblFPPwdError;
    private javax.swing.JLabel lblFPStateError;
    private javax.swing.JLabel lblFPZipError;
    private javax.swing.JLabel lblFPantryManagerError;
    private javax.swing.JLabel lblFPidError;
    private javax.swing.JLabel lblFPnameError;
    private javax.swing.JLabel lblFoodPantryAdd;
    private javax.swing.JLabel lblFoodPantryCity;
    private javax.swing.JLabel lblFoodPantryID;
    private javax.swing.JLabel lblFoodPantryManager;
    private javax.swing.JLabel lblFoodPantryName;
    private javax.swing.JLabel lblFoodPantryPhno;
    private javax.swing.JLabel lblFoodPantryState;
    private javax.swing.JLabel lblFoodPantryZip;
    private javax.swing.JLabel lblFoodPantrypwd;
    private javax.swing.JLabel lblWHPantryName;
    private javax.swing.JLabel lblWHfcpname1;
    private javax.swing.JTextField txtFCPPhno;
    private javax.swing.JTextField txtFCPid;
    private javax.swing.JTextField txtFCPname;
    private javax.swing.JTextField txtFPAdd;
    private javax.swing.JTextField txtFPCity;
    private javax.swing.JTextField txtFPConfpwd;
    private javax.swing.JTextField txtFPManager;
    private javax.swing.JTextField txtFPManagerUsername;
    private javax.swing.JTextField txtFPState;
    private javax.swing.JTextField txtFPZip;
    private javax.swing.JTextField txtFPpwd;
    // End of variables declaration//GEN-END:variables

    private boolean nullCheck() {
        if(txtFCPid.getText().length()!=0 && txtFCPname.getText().length()!=0  && 
                txtFCPPhno.getText().length()!=0 && txtFPAdd.getText().length()!=0 && txtFPCity.getText().length()!=0 && 
                txtFPState.getText().length()!=0 && txtFPZip.getText().length()!=0 && txtFPManager.getText().length()!=0 && 
                txtFPManagerUsername.getText().length()!=0 && txtFPpwd.getText().length()!=0 && txtFPConfpwd.getText().length()!=0)
            {
                return false;
            }
            else return true;
        }

    private void clearfields() {
        txtFCPid.setText("");
        txtFCPname.setText("");
        comboWHPantry.setSelectedIndex(0);
        txtFCPPhno.setText("");
        txtFPAdd.setText("");
        txtFPCity.setText("");
        txtFPState.setText("");
        txtFPZip.setText("");
        txtFPManager.setText("");
        txtFPManagerUsername.setText("");
        txtFPpwd.setText("");
        txtFPConfpwd.setText("");
    }

    private boolean chkpwd() {
        if(txtFPpwd.getText().equals(txtFPConfpwd.getText())){
            return true;
        }
        else{
            return false;
        }
    }
}
